plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.61"
    id 'com.github.ben-manes.versions' version '0.20.0'
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC8"
}
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'org.jetbrains.dokka'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // KOTLIN
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"

    compileOnly "junit:junit:${junit4_version}"

    // TESTS
    testCompileOnly "junit:junit:${junit4_version}"
    testCompile "net.wuerl.kotlin:assertj-core-kotlin:${assertj_version}"
    testCompile "com.nhaarman:mockito-kotlin:${mockito_kotlin_version}"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"

    // SPEK
    testCompile "org.jetbrains.spek:spek-api:$spek_version"
    testCompile "org.jetbrains.spek:spek-subject-extension:$spek_version"
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spek_version"
    testRuntime "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    testRuntime("org.junit.vintage:junit-vintage-engine:${junit_vintage_version}")

    // Email validation
    testCompile "egulias:EmailValidator4J:1.0.0"
    testCompile "com.github.bbottema:emailaddress-rfc2822:1.1.0"
}

// region Publish Sources & Javadoc Jars

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
    archiveName = 'sources.jar'
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    archiveName = 'javadoc.jar'
    from javadoc.destinationDir
}


artifacts {
    archives sourcesJar
    archives javadocJar
}

// endregion

// region JUnit

junitPlatform {
    filters {
        engines {
            include 'spek', 'junit-jupiter', 'junit-vintage'
        }
    }
}

project.afterEvaluate {
    def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

    // configure jacoco to analyze the junitPlatformTest task
    jacoco {
        toolVersion = "0.7.8"
        applyTo junitPlatformTestTask
    }

    // create junit platform jacoco task
    def jacocoTask = project.task(type: JacocoReport, "junitPlatformJacocoReport",
            {
                sourceSets sourceSets.main
                sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
                classDirectories = files(project.sourceSets.main.output)
                executionData junitPlatformTestTask

                reports {
                    xml.enabled true
                    xml.destination file("${buildDir}/reports/jacoco/report.xml")
                    csv.enabled false
                    html.enabled true
                }
            })

    project.tasks.getByName('check').dependsOn jacocoTask

    project.tasks.getByName('install').dependsOn sourcesJar

    project.tasks.getByName('install').dependsOn javadocJar
}

// endregion

// region Detekt

detekt {
    version = "1.0.0.RC8"
    profile("main") {
        input = "$projectDir/src/main/kotlin"
        output = "$project.projectDir/build/reports/detekt"
        config = "$project.rootDir/detekt-config.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
    }
}

//check.dependsOn detektCheck

// endregion

